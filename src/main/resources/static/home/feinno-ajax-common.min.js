var contextPath = "${pageContext.request.contextPath}";
jQuery
		.extend({
			createUploadIframe : function(id, uri) {
				var frameId = "jUploadFrame" + id;
				if (window.ActiveXObject) {
					try {
						io = document.createElement('<iframe name="' + frameId
								+ '" id="' + frameId + '"></iframe>')
					} catch (e) {
						io = document.createElement("iframe");
						io.name = frameId;
						io.id = frameId
					}
					if (typeof uri == "boolean") {
						io.src = "javascript:false"
					} else {
						if (typeof uri == "string") {
							io.src = uri
						}
					}
				} else {
					var io = document.createElement("iframe");
					io.id = frameId;
					io.name = frameId
				}
				io.style.position = "absolute";
				io.style.top = "-1000px";
				io.style.left = "-1000px";
				document.body.appendChild(io);
				return io
			},
			createUploadForm : function(id, fileElementId) {
				var formId = "jUploadForm" + id;
				var fileId = "jUploadFile" + id;
				var form = $('<form  action="" method="POST" name="' + formId
						+ '" id="' + formId
						+ '" enctype="multipart/form-data"></form>');
				var oldElement = $("#" + fileElementId);
				var newElement = $(oldElement).clone();
				$(oldElement).attr("id", fileId);
				$(oldElement).before(newElement);
				$(oldElement).appendTo(form);
				$(form).css("position", "absolute");
				$(form).css("top", "-1200px");
				$(form).css("left", "-1200px");
				$(form).appendTo("body");
				return form
			},
			ajaxFileUpload : function(s) {
				s = jQuery.extend({}, jQuery.ajaxSettings, s);
				var id = s.fileElementId;
				var form = jQuery.createUploadForm(id, s.fileElementId);
				var io = jQuery.createUploadIframe(id, s.secureuri);
				var frameId = "jUploadFrame" + id;
				var formId = "jUploadForm" + id;
				if (s.global && !jQuery.active++) {
					jQuery.event.trigger("ajaxStart")
				}
				var requestDone = false;
				var xml = {};
				if (s.global) {
					jQuery.event.trigger("ajaxSend", [ xml, s ])
				}
				var uploadCallback = function(isTimeout) {
					var io = document.getElementById(frameId);
					try {
						if (io.contentWindow) {
							xml.responseText = io.contentWindow.document.body ? io.contentWindow.document.body.innerHTML
									: null;
							xml.responseXML = io.contentWindow.document.XMLDocument ? io.contentWindow.document.XMLDocument
									: io.contentWindow.document
						} else {
							if (io.contentDocument) {
								xml.responseText = io.contentDocument.document.body ? io.contentDocument.document.body.innerHTML
										: null;
								xml.responseXML = io.contentDocument.document.XMLDocument ? io.contentDocument.document.XMLDocument
										: io.contentDocument.document
							}
						}
					} catch (e) {
						jQuery.handleError(s, xml, null, e)
					}
					if (xml || isTimeout == "timeout") {
						requestDone = true;
						var status;
						try {
							status = isTimeout != "timeout" ? "success"
									: "error";
							if (status != "error") {
								var data = jQuery.uploadHttpData(xml,
										s.dataType);
								if (s.success) {
									s.success(data, status)
								}
								if (s.global) {
									jQuery.event.trigger("ajaxSuccess", [ xml,
											s ])
								}
							} else {
								jQuery.handleError(s, xml, status)
							}
						} catch (e) {
							status = "error";
							jQuery.handleError(s, xml, status, e)
						}
						if (s.global) {
							jQuery.event.trigger("ajaxComplete", [ xml, s ])
						}
						if (s.global && !--jQuery.active) {
							jQuery.event.trigger("ajaxStop")
						}
						if (s.complete) {
							s.complete(xml, status)
						}
						jQuery(io).unbind();
						setTimeout(function() {
							try {
								$(io).remove();
								$(form).remove()
							} catch (e) {
								jQuery.handleError(s, xml, null, e)
							}
						}, 100);
						xml = null
					}
				};
				if (s.timeout > 0) {
					setTimeout(function() {
						if (!requestDone) {
							uploadCallback("timeout")
						}
					}, s.timeout)
				}
				try {
					var form = $("#" + formId);
					$(form).attr("action", s.url);
					$(form).attr("method", "POST");
					$(form).attr("target", frameId);
					if (form.encoding) {
						form.encoding = "multipart/form-data"
					} else {
						form.enctype = "multipart/form-data"
					}
					$(form).submit()
				} catch (e) {
					jQuery.handleError(s, xml, null, e)
				}
				if (window.attachEvent) {
					document.getElementById(frameId).attachEvent("onload",
							uploadCallback)
				} else {
					document.getElementById(frameId).addEventListener("load",
							uploadCallback, false)
				}
				return {
					abort : function() {
					}
				}
			},
			uploadHttpData : function(r, type) {
				var data = !type;
				data = type == "xml" || data ? r.responseXML : r.responseText;
				if (type == "script") {
					jQuery.globalEval(data)
				}
				if (type == "json") {
					data = r.responseText
				}
				var start = data.indexOf(">");
				if (start != -1) {
					var end = data.indexOf("<", start + 1);
					if (end != -1) {
						data = data.substring(start + 1, end)
					}
				}
				eval("data = " + data);
				if (type == "html") {
					jQuery("<div>").html(data).evalScripts()
				}
				return data
			}
		});
function ajaxFileUpload(url, fileElementId, callback) {
	if (url.indexOf("?") >= 0) {
		url = url + "&isAjax=true"
	} else {
		url = url + "?isAjax=true"
	}
	if (typeof (popup) != "undefined") {
		popup.openLoadingLayer()
	}
	$.ajaxFileUpload({
		url : url,
		secureuri : false,
		fileElementId : fileElementId,
		dataType : "json",
		cache : false,
		success : function beforeCallback(data, status) {
			if (data == "999991") {
				window.location.href = contextPath + "/login/repeat.html"
			} else {
				if (data == "999992") {
					window.location.href = contextPath + "/login.html"
				} else {
					if (callback != null) {
						callback(data, status);
						if (typeof (popup) != "undefined") {
							popup.closeLoadingLayer()
						}
					}
				}
			}
		},
		error : function(data, status, e) {
			window.location.href = contextPath + "/error/500.html"
		},
		complete : function() {
			if (typeof (popup) != "undefined") {
				popup.closeLoadingLayer()
			}
		}
	})
}
function ajaxOperate(url, data, callback, isAsync, submitType) {
	if (url.indexOf("?") >= 0) {
		url = url + "&isAjax=true"
	} else {
		url = url + "?isAjax=true"
	}
	if (isAsync == false || isAsync == "false") {
		isAsync = false
	} else {
		if (isAsync == true || isAsync == "true") {
			isAsync = true
		} else {
			isAsync = true
		}
	}
	if (isAsync && typeof (popup) != "undefined") {
		popup.openLoadingLayer()
	}
	if (!submitType) {
		submitType = "GET"
	}
	$.ajax({
		url : url,
		type : submitType,
		dataType : "json",
		cache : false,
		data : data,
		async : isAsync,
		success : function beforeCallback(data, status) {
			if (data == "999991") {
				window.location.href = contextPath + "/login/repeat.html"
			} else {
				if (data == "999992") {
					window.location.href = contextPath + "/login.html"
				} else {
					if (callback != null) {
						callback(data, status)
					}
				}
			}
		},
		error : function(data, status, e) {
			window.location.href = contextPath + "/error/500.html"
		},
		complete : function() {
			if (typeof (popup) != "undefined") {
				popup.closeLoadingLayer()
			}
		}
	})
}
function checkSuffix(config, inputId) {
	var fileValue = $("#" + inputId).val();
	if (fileValue == null || fileValue == "") {
		popup.openInfoBox("提示", "请选择上传文件！");
		return false
	}
	var dd = fileValue.split(".");
	var suffix = dd[dd.length - 1].toLowerCase();
	var _exist = $.inArray(suffix, config.allowSuffix);
	if (_exist > -1) {
		return true
	} else {
		var permitSuffix = config.allowSuffix.join(",");
		var info = "请选择“" + permitSuffix + "”格式的文件!";
		popup.openInfoBox("提示", info);
		clearFile(inputId);
		return false
	}
}
function clearFile(inputId) {
	var file = $("#" + inputId);
	var fileClone = file.clone();
	file.after(fileClone.val(""));
	file.remove()
};